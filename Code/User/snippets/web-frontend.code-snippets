{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  //
  // Axios cheatsheet
  // https://kapeli.com/cheat_sheets/Axios.docset/Contents/Resources/Documents/index
  "import axios": {
    "scope": "javascript,typescript,vue",
    "prefix": "axios-import",
    "body": [
      "import axios from 'axios'"
    ],
    "description": "import axios"
  },
  "axios base url instance": {
    "scope": "javascript,typescript,vue",
    "prefix": "axios-base",
    "body": [
      "const apiCall = axios.create({",
      "  baseURL: '${1:https://some-domain.com/api/}',",
      "  timeout: ${2:1000},",
      "  headers: {",
      "    'Content-Type': 'application/json'",
      "  }",
      "});"
    ],
    "description": "axios base url instance"
  },
  "vuepress badge component": {
    "scope": "vue-html,markdown",
    "prefix": "badge",
    "body": [
      "<Badge type=\"${1|tip,error,warning|}\" vertical=\"${2|middle,top|}\" text=\"${3:For Example,}\" /> $0"
    ],
    "description": "vuepress badge component"
  },
  "dotenv-require": {
    "scope": "javascript,typescript",
    "prefix": "dotenv",
    "body": [
      "require('dotenv').config()"
    ],
    "description": "dotenv-require"
  },
  "data property vuejs": {
    "scope": "javascript,typescript",
    "prefix": "data",
    "body": [
      "data: () => ({",
      "  $0 ",
      "}),"
    ],
    "description": "data property vuejs"
  },
  "props vue-script": {
    "scope": "javascript,typescript",
    "prefix": "props",
    "body": [
      "props: {",
      "  ${1:name}: {",
      "    type: ${2|String,Number,Boolean|},",
      "    default: '${3}'",
      "  },",
      "  $0",
      "},"
    ],
    "description": "props vue-script"
  },
  "axios async await": {
    "prefix": "axios-get",
    "scope": "javascript,typescript",
    "body": [
      "const ${1:asyncFunc} = async () => {",
      "  const queryString = {",
      "    answer: 42 ${0}",
      "  }",
      "  try {",
      "    const response = await axios.get(\"/${3:url}\", { params: queryString });",
      "    const data = await response.json()",
      "    return data",
      "  } catch (error) {",
      "    console.error(error);",
      "  }",
      "}"
    ],
    "description": "axios async await"
  },
  "axios post async await": {
    "prefix": "axios-post",
    "scope": "javascript,typescript",
    "body": [
      "const ${1:asyncFunc} = async () => {",
      "  const postData = {",
      "    answer: 42,${0}",
      "  }",
      "  try {",
      "    const response = await axios.post(\"/${2:url}\", postData);",
      "    const data = await response.json()",
      "    return data",
      "  } catch (error) {",
      "    console.error(error);",
      "  }",
      "}"
    ],
    "description": "axios post async await"
  },
  "jest test suite scaffold": {
    "prefix": "jest-ts",
    "scope": "javascript,typescript,typescriptreact,javascriptreact",
    "body": [
      "import { jest } from '@jest/globals';",
      "",
      "describe('${1:Test Suite Name}', () => {",
      "",
      "  beforeAll(() => { });",
      "  afterAll(() => { });",
      "",
      "  beforeEach(() => { });",
      "  afterEach(() => { });",
      "",
      "  test('should test case 1', () => {",
      "    $0",
      "    expect(true).toEqual(true);",
      "  })",
      "",
      "});",
      ""
    ],
    "description": "jest test suite scaffold"
  },
  "backend api pattern": {
    "prefix": "api-axios",
    "scope": "javascript,typescript",
    "body": [
      "import axios, { AxiosInstance } from 'axios'",
      "",
      "interface IgetQueryString {",
      "  base?: string;",
      "}",
      "",
      "interface IPostData {",
      "  firstName: string;",
      "  address: string;",
      "  numberOfChildren: number;",
      "  occupation: string;",
      "  email: string;",
      "}",
      "",
      "interface IapiPath {",
      "  apiPath: string;",
      "}",
      "",
      "interface IgetCall extends IapiPath {",
      "  queryString: IgetQueryString",
      "}",
      "",
      "interface IpostCall extends IapiPath {",
      "  postData?: IPostData",
      "}",
      "// type IpostCall = IapiPath & IPostData",
      "// type IgetCall = IapiPath & IgetQueryString",
      "",
      "",
      "class Backend {",
      "  _api: AxiosInstance",
      "  _baseURL: string = 'https://challenge-dot-popsure-204813.appspot.com'",
      "  readonly _timeout: number = 2000",
      "  readonly _headers: object = { 'Content-Type': 'application/json' }",
      "",
      "  constructor(urlBase?: string) {",
      "    this._api = axios.create({",
      "      baseURL: (urlBase) ? urlBase : this._baseURL,",
      "      timeout: this._timeout,",
      "      headers: this._headers",
      "    });",
      "  }",
      "",
      "  getCall = async ({ apiPath = '/user', queryString = {} }: IgetCall) => {",
      "    try {",
      "      const response = await this._api.get(apiPath, { params: queryString });",
      "      const data = await response.data",
      "      // console.dir(data)",
      "      return data",
      "    } catch (error) {",
      "      console.error(error);",
      "    }",
      "  }",
      "",
      "  postCall = async (paramObj: IpostCall) => {",
      "    paramObj = paramObj || {",
      "      apiPath: '/user',",
      "      postData: {",
      "        firstName: \"Jane\",",
      "        address: \"Lohmühlenstraße 65\",",
      "        numberOfChildren: 2,",
      "        occupation: \"EMPLOYED\",",
      "        email: \"jane.doe@getpopsure.com\"",
      "      }",
      "    }",
      "    try {",
      "      const response = await this._api.post(paramObj.apiPath, paramObj.postData);",
      "      const data = await response.data",
      "      return data",
      "    } catch (error) {",
      "      console.error('API Error', error);",
      "    }",
      "  }",
      "}",
      "",
      "export const backend = new Backend()",
      ""
    ],
    "description": "backend api pattern"
  }
}