---
tags: [typescript, type, frontend]
---
# types
In Typescript, it’s better to think of a type as a set of values that share something in common.
Because types are just sets, a particular value can belong to many sets at the same time.

objects are not of a single exact type
For example, if we construct an object that satisfies an interface
we can use that object where that interface is expected even though there was no declarative relationship between the two.

TypeScript’s type system is structural, not nominal(existing in name only)

If the structures of these classes are the same but have different names, they could be used interchangeably

# Default values to function parameters
You cannot provide default values for interfaces or type aliases
as they are compile time only and default values need run-time support

# Difference b/w types and classes?
Types are primitives, classes are user defined Model of data
https://stackoverflow.com/questions/468145/what-is-the-difference-between-type-and-class

# Why Type Systems?
used less in industry, more in academia
- More Efficient, compiler catches some errors/potential bugs, less documentation (types are the documentation), fewer tests
- better tooling IDE, safety for maintenance
- Generics Types promotes Polymorphism

great designs are discovered and not invented. Using patterns and constraints and sensible abstractions, its not random

# Why have interfaces in typescript? to overcome the flexibility provided by dynamic typing system in js?
Is this language flexibility?
```js
var a = 2
a = function () {
  console.log("I was initialized with a value of an integer, but now I'm a function")
}
```
Use interfaces as to enforce DIP, Dependency Inversion Principle. To write more testable/maintainable code
- High-level modules should not depend on low-level modules. Both should depend on abstractions.
- Abstractions should not depend on details. Details should depend on abstractions.

