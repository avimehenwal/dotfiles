---
tags: [cs, oo, modelling, design, diagram, uml ]
---
# Class Diagrams
https://www.lucidchart.com/pages/uml-class-diagram
http://www.ffnn.nl/pages/articles/media/uml-diagrams-using-graphviz-dot.php

# How to draw diagrams and banners
* [Graphviz examples](https://ncona.com/2020/06/create-diagrams-with-code-using-graphviz/)

# ASCII Art
* figlet
* cowsay
* boxes - draw any kind of box around text

echo "Hey, this is Tecmint.com! Thanks for following us." | boxes -d boy
echo "Tecmint.com wishes you a Merry Christmas and a Happy New Year 2019" | boxes -d santa

# GRAPHS and CHARTS
1. termgrgaph
2. sparklines
3. graph-easy

echo "[ Bonn ] -- car --> [ Berlin ], [ Ulm ]" | graph-easy

# How to draw Venn Diagram?
https://stackoverflow.com/questions/8713994/venn-diagram-proportional-and-color-shading-with-semi-transparency

# How to visualize code? UML unused potential
UML standardized in 1997
can be drawn with a single pen color, original design decision

> Software reading,writing,modifying ratio 78:2:20 %

# Redability Techniques
- Syntax Highlighting
- Naming conventions for class, variable, objects, interfaces
- Whitespaces, indentation, comments
* Visual Variables? visual Relationships? Compiled into our brain and processed immediately

# Software Visualization Tools Types
1. Structure Visualization
    - class hierarchy UML diagrams
    - Doxygen   documentation reference software with diagrams support for C, Objective-C, C#, PHP, Java, Python, IDL (Corba, Microsoft, and UNO/OpenOffice flavors), Fortran, VHDL and to some extent D
    - vs code - code maps
    - cpp depends
2. Bahaviour Visualization
    - flame chart visualization
    - algorithm runtime visualizations
3. Evolution Visualization
    - visualization on git log

# software visualization for typescript
- https://github.com/microsoft/TypeScript/issues/15520

# Use Case
what do you get from the software, interaction between user/human and the software system
1. Systems          webapp, s/w component, business process, website. Eg: Banking App
2. Actors           that uses system to achieve a goal. Eg: could be other s/w, systems, apis, user. PRIMARY, SECONDARY actor: reactionary
3. Use-cases        represents an action that accomplishes some kind of task/goal within the system
4. Relationships    Association, Include (base + included use case), Extend (based on some condition on base usecase), Generalization aka Inheritance

https://youtu.be/zid-MVo7M-E

# Resources
- https://youtu.be/fnIFVYFspfc
- https://github.com/CoatiSoftware/Sourcetrail
- https://youtu.be/zid-MVo7M-E
- https://martin.elwin.com/blog/2008/05/uml-use-case-diagrams-graphviz/

# UML - Unified Modelling Language
## Generalization vs Inheritance similarities and differences
The generalization/specialization relationship is implemented in object-oriented programming languages with inheritance.
Some Forms of Generalization
1. Hierarchy      In the case of hierarchy, the commonalities are organized into a tree structured form. At the root of any subtree are found all the attributes and behavior common to all of the descendents of that root.
2. Genericity     In this case, the commonality is expressed with the aid of a parameter. Various specializations are distinguished by what they provide for the parameter. For example, using genericity it is possible to represent the common properties of a "stack" through the generalization of a "stack of anything", where "anything" represents the parameter.
3. Polymorphism   Polymorphism captures commonality in algorithms. Polymorphism allows the nested logic (or case statement) to be collapsed to a single case in which the different object types are treated in a uniform manner.
4. Patterns       A pattern expresses a general solution (the key components and relationships) to a commonly occurring design problem. The attributes and behavior of the individual components are only partially defined to allow the pattern to be interpreted and applied to a wide range of situations.

## Composition | Inheritance
Inheritance       is-a relationship
Composition       has-a r/s

## UML Relationships - Interactions b/w classes
1. Association            uni-directional, bi-directional association. class X knows nothing about class Y. Multiplicity, unary & Binary associations 
Unary: Person ---> Address.
  1.1 Aggregation         <>-----> Existence of X is INDEPENDENT of Y
  1.2 Composition         </>----> Existence of SALARY dependes on the existence of Employee. No employee => no salary
2. Dependency             ----> X uses Y
3. Generalization         inheritance is-a r/s
4. Realization
5. Aggregation
