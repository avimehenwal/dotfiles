---
syntax: markdown
tags: [javascript, react, design-patterns]
---

# React Hooks

Hooks is an implementation detail of that component.

+------------------+  to   +-----------------------+
| Class Components | ----> | Functional Components |
+------------------+       +-----------------------+

1. useState rerender on change, props are immutable
2. useEffect use native DOM api, external API calls, lifecycle events
3. useReduce replace Redux state management pattern
4. useMemo use caching, do not re-render everytime

# Sharing business logic techniques

1. react customHooks - extract component logic into reusable functions.
2. HOC Higher Order Component pattern

+--------------+  HOC   +-------------------------+
| newComponent | -----> | Behaviour(oldComponent) |
+--------------+        +-------------------------+

import React from 'react';
// Take in a component as argument WrappedComponent
const higherOrderComponent = (WrappedComponent) => {
  // And return another component
  class HOC extends React.Component {
    render() {
      return <WrappedComponent />;
    }
  }
  return HOC;
};

# HOC Use Cases

1. Logging and debugging info
2. Render component only when user is authenticated
3. Send events to server when the component mounts

# Sharing Code b/w components?

1. Render Props, props which are functions

# Dealing with input Elements

1. Controlled Elements controlled by react
2. Uncontrolled elements

# Design Patterns

CQS Command(mutation) Queryr(result) Seperation
CQRS Command Query Responsibiliyu Seperation
Layered Approach Patter Clean architecture, Infrastructure layer, Business Logic layer, Presentation layer
Design By Contract Pre-Condition on arguments, SideEffects, Post-Condition on return. Implemented using `assert` in many languages.

# Data Transformations

1. Enrichment
2. Normalization

# React Component Anatomy

+-----------------+     +-----------+  render   +-----+
| immutable props | --> | component | --------> | DOM |
+-----------------+     +-----------+           +-----+
                              ^
                              |
                              |
                    +------------------+
                    | states mutations |
                    +------------------+

" echo "[immutable props], [state mutations] --> [components] -- render --> [DOM]" | graph-easy
" put =execute('term ' . getline(69))

- When to use states and when to use props?
- changes on states are automatically rendered on UI, after reconcilation

## Types of Components and Components Patterns

1. Dumb/Presentational Components only render markup with props, no logic
2. Container/Smart Components Have some Business Logic
3. Higher Order Components oldComponent + Logic = newComponent
4. custom Hooks seperation of business logic, implementation detail and presentational component
5. Render Props props = () => {}

# State Management Pattern

+----------------+  DISPATCH   +------------------+  ACTION(s)   +-------+
| store + action | ----------> | Reducer Function | -----------> | Store |
+----------------+             +------------------+              +-------+

echo "[store + action] -- DISPATCH --> [Reducer Function] -- ACTION(s) --> [Store]" | graph-easy | wl-copy

## Redux Middleware

-> Based on CQS Pattern
-> Middleware allows you run multiple commands, queries on particular ACTION types. Eg, notify user on each write. then all writes could be wriiten as SET\_<some-name>

## Component Library

1. [create-react-library]()
2. [Bit](https://bit.dev/pricing)
3. [react styleguide](https://react-styleguidist.js.org/)

> Examples from github

- https://github.com/lonelyplanet/backpack-ui

### Component Library Features

| Features                           | Implementation                        |
| ---------------------------------- | ------------------------------------- |
| UI for each component              | storybook                             |
| Static code analysis               | typescript, [flow](https://flow.org/) |
| building / compiling / transpiling | src --> dist tsc, babel               |
| publish ready                      | npm, bit, github                      |
| static analysis                    | typescript                            |
| unittest                           | jest + react-testing-library + jsdom  |
| Scoped CSS                         | CSS Modules support                   |
| Debugging                          | sitemaps                              |

- use **peer dependency** when packaging

## Code Samples
https://github.com/httpJunkie/kr-todo-hooks

# Explain at least 4 hooks

# How react re-renders? When does it re-render?, What hooks causes re-render?
- React.useState()
- React.useCallback()    caches function
- use react Performance Tools Perf.start(), Perf.stop()

  What is a wasted render? How to identify one? react developer tools highlights updates

# useReducer vs useContext hook diff?
- useState is built using useReducer, when to use when?
newState = reducer(currentState, action)
- returns 2 values, newState and dispatch
useReducer with useContext to maintain GLOBAL STATE Management

# Drag and drop container?
drop, dragOver Events   https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer
