---
syntax: javascript
tags: [javascript, react, design-patterns]
---

Referential Integrity in js, all component functions are re-created on re-renders if NOT Memoized

# React Hooks

Hooks is an implementation detail of that component.

+------------------+  to   +-----------------------+
| Class Components | ----> | Functional Components |
+------------------+       +-----------------------+

1. useState rerender on change, props are immutable
2. useEffect use native DOM api, external API calls, lifecycle events
3. useReduce replace Redux state management pattern
4. useMemo use caching, do not re-render everytime

# Sharing business logic techniques

1. react customHooks - extract component logic into reusable functions.
2. HOC Higher Order Component pattern

+--------------+  HOC   +-------------------------+
| newComponent | -----> | Behaviour(oldComponent) |
+--------------+        +-------------------------+

import React from 'react';
// Take in a component as argument WrappedComponent
const higherOrderComponent = (WrappedComponent) => {
  // And return another component
  class HOC extends React.Component {
    render() {
      return <WrappedComponent />;
    }
  }
  return HOC;
};

# HOC Use Cases

1. Logging and debugging info
2. Render component only when user is authenticated
3. Send events to server when the component mounts

# Sharing Code b/w components?

1. Render Props, props which are functions

# Dealing with input Elements

1. Controlled Elements controlled by react
2. Uncontrolled elements

# Design Patterns

CQS Command(mutation) Queryr(result) Seperation
CQRS Command Query Responsibiliyu Seperation
Layered Approach Patter Clean architecture, Infrastructure layer, Business Logic layer, Presentation layer
Design By Contract Pre-Condition on arguments, SideEffects, Post-Condition on return. Implemented using `assert` in many languages.

# Data Transformations

1. Enrichment
2. Normalization

# React Component Anatomy

+-----------------+     +-----------+  render   +-----+
| immutable props | --> | component | --------> | DOM |
+-----------------+     +-----------+           +-----+
                              ^
                              |
                              |
                    +------------------+
                    | states mutations |
                    +------------------+

" echo "[immutable props], [state mutations] --> [components] -- render --> [DOM]" | graph-easy
" put =execute('term ' . getline(69))

- When to use states and when to use props?
- changes on states are automatically rendered on UI, after reconcilation

## Types of Components and Components Patterns

1. Dumb/Presentational Components only render markup with props, no logic
2. Container/Smart Components Have some Business Logic
3. Higher Order Components oldComponent + Logic = newComponent
4. custom Hooks seperation of business logic, implementation detail and presentational component
5. Render Props props = () => {}

# State Management Pattern

+----------------+  DISPATCH   +------------------+  ACTION(s)   +-------+
| store + action | ----------> | Reducer Function | -----------> | Store |
+----------------+             +------------------+              +-------+

echo "[store + action] -- DISPATCH --> [Reducer Function] -- ACTION(s) --> [Store]" | graph-easy | wl-copy

## Redux Middleware

-> Based on CQS Pattern
-> Middleware allows you run multiple commands, queries on particular ACTION types. Eg, notify user on each write. then all writes could be wriiten as SET\_<some-name>

## Component Library

1. [create-react-library]()
2. [Bit](https://bit.dev/pricing)
3. [react styleguide](https://react-styleguidist.js.org/)

> Examples from github

- https://github.com/lonelyplanet/backpack-ui

### Component Library Features

| Features                           | Implementation                        |
| ---------------------------------- | ------------------------------------- |
| UI for each component              | storybook                             |
| Static code analysis               | typescript, [flow](https://flow.org/) |
| building / compiling / transpiling | src --> dist tsc, babel               |
| publish ready                      | npm, bit, github                      |
| static analysis                    | typescript                            |
| unittest                           | jest + react-testing-library + jsdom  |
| Scoped CSS                         | CSS Modules support                   |
| Debugging                          | sitemaps                              |

- use **peer dependency** when packaging

* Each time a state changes in component, entire component is re-rendered
  -> create a child component for the element which re-renders to save wasted render, improve performance

## Code Samples
https://github.com/httpJunkie/kr-todo-hooks

# Explain at least 4 hooks

# How react re-renders? When does it re-render?, What hooks causes re-render?
- React.useState()
- React.useCallback()    caches function, only purpose is performance
- use react Performance Tools Perf.start(), Perf.stop()

here if onChangeCallback is declared as just a function or arrow expression it will be re-created on each render.
So it will be referentially different. And nested child will be re-rendered each time while it does not have to.

  What is a wasted render? How to identify one? react developer tools highlights updates

# useReducer vs useContext hook diff?
- useState is built using useReducer, when to use when?
newState = reducer(currentState, action)
- returns 2 values, newState and dispatch
useReducer with useContext to maintain GLOBAL STATE Management

# Drag and drop container?
drop, dragOver Events   https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer

# What is the difference between useCallback, useEffect and useMemo hooks?
useCallback is often used in conjunction with useEffect to minimize re-renders.
In js, every function is an object. So if a outer function is rendered/called, the inner function is also re-created!
calling innerFunctions inside useEffect() can cause performance problems and infinite re-renders and infinite loops

# State Management pattern with react
1. local states
2. global states
3. DI, dependency Inject states and re-render
4. states Factory

import React, {
	createContext,
	FC,
	useCallback,
	useContext,
	useMemo,
	useState
} from "react";

const CheckboxContext = createContext();

const CheckpoxProvider: FC = ({ children }) => {
	const [checked, setChecked] = useState(false);
	const check = useCallback(() => {
		setChecked(true);
	}, []);
	const uncheck = useCallback(() => {
		setChecked(true);
	}, []);
	const toggle = useCallback((requestedState?: boolean) => {
		if (typeof requestedState === "boolean") {
			setChecked(requestedState);
		} else {
			setChecked((previousState) => !previousState);
		}
	}, []);
	const context = useMemo(() => ({ checked, check, uncheck, toggle }), [
		checked,
		check,
		uncheck,
		toggle
	]);
	return (
		<CheckboxContext.Provider value={context}>
			{children}
		</CheckboxContext.Provider>
	);
};

const useCheckbox = () => useContext(CheckboxContext);

interface CheckboxProps {
	checked?: boolean;
	onChange(checked: boolean): void;
}

const Checkboxes = () => {
	const { toggle, checked } = useCheckbox();
	return (
		<>
			<Checkbox
				checked={checked}
				onChange={(requestedChecked) => {
					toggle(requestedChecked);
				}}
			/>
			<Checkbox
				checked={checked}
				onChange={(requestedChecked) => {
					toggle(requestedChecked);
				}}
			/>
		</>
	);
};

const App = () => {
	return (
		<CheckpoxProvider>
			<Checkboxes />
		</CheckpoxProvider>
	);
};

# understanding react source code
1. Monorepository pattern
2. https://github.com/numbbbbb/read-react-source-code
3. Package sizes with diff(s)
4. react hooks packages/react/src/ReactHooks.js

# Dependency Injection in react using react custom hooks in Container Patter, => more testable

const Component = (props) => {
    return <div>{ props.data }</div>;
};

const Container = (props) => {
    const data = useHook();

    return <Component data={data} />;
};

/* So, the 2 main differences between references and state
 * 
 * 1. Updating a reference doesnâ€™t trigger re-rendering, while updating the state makes the component re-render;
 * 2. The reference update is synchronous (the updated reference value is available right away),
 *    while the state update is asynchronous (the state variable is updated after re-rendering).
 * 
 * From a higher point of view, references store infrastructure data of side-effects,
 * while the state stores information that is directly rendered on the screen.
 * 
*/

import { useRef } from 'react';

function LogButtonClicks() {
  const countRef = useRef(0);  
  const handle = () => {
    countRef.current++;    console.log(`Clicked ${countRef.current} times`);
  };

  console.log('I rendered!');

  return <button onClick={handle}>Click me</button>;
}

// useRef UseCases: https://stackoverflow.com/questions/66429202/what-are-production-use-cases-for-the-useref-usememo-usecallback-hooks
1. To access the DOM: <div ref={myRef} />
2. Store mutable value like instance variable (in class)
3. A render counter
4. A value to be used in setTimeout / setInterval without a stale closure issue.

