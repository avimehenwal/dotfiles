---
syntax: markdown
tags: [frontend, javascript]
---
## Concurrency in JS | vs Parallelism
IO Driven                 ------- single event -----|-------- multiple events -------
{ Synchronous << Asynchronous (callbacks | Promises | async/await) << Streams/Observables }
* JS is async but its NOT parallel, single threaded event loop environment
* Eg; network call, scrolling the page and repainting the screen
* Promises and Generators
* Channels in JS https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API/Using_channel_messaging

# Javascript Interactive Runtime
Download RunJS appimage https://runjs.dev/

- JS is single threaded programming language

| Objects                                      | Description                                                          |
| -------------------------------------------- | -------------------------------------------------------------------- |
| window                                       | represents browsers window, all GLOBAL var, functions are added here |
| one window object for each tab,              |
| size, resize, position                       |
| open a url in browser window programatically |
| document                                     | represents DOM, is also a part of window object                      |

# window. is implied with dom document object

document.getElementById('id') = window.document.getElementById('id')

A global variable, window, representing the window in which the script is running, is exposed to JavaScript code.

# DOM - Document Object Model

The DOM is an API that represents and interacts with any HTML or XML document. The DOM is a document model loaded in the browser and representing the document as a node tree, where each node represents part of the document (e.g. an element, text string, or comment).

The DOM is one of the most-used APIs on the Web because it allows code running in a browser to access and interact with every node in the document. Nodes can be created, moved and changed. Event listeners can be added to nodes and triggered on occurrence of a given event.

DOM was not originally specified—it came about when browsers began implementing JavaScript. This legacy DOM is sometimes called DOM 0. Today, the WHATWG maintains the DOM Living Standard.

## Compilers

| Babel                 | Typescript                   |
| --------------------- | ---------------------------- |
| MIT                   | Apachey 2                    |
| Community 2014        | Microsoft 2012               |
| Transpiler            | Programming Language         |
| use latest ES6 or ES5 | its own ES6 compliant syntax |

[Babel 1st release on github](https://github.com/babel/babel/releases/tag/v1.7.7)

## BUNDLERs

Dead code elimination, or Tree shaking, as it’s often called, is very important to achieve the optimum bundle size and hence app performance.

- Code Splitting - seperate bundler

## JS Machine | javascript to C++ world
memory heap         as a place to store and write information on RAM. store global variables
call stack          helps us keep track of where we are in the code so that we can run the code in order
                    stack memory is good for primitive data types. Not so much for complex data structures like Objects
                    so we put pointers to Objects on stack
                    Virtual Machine     abstraction that defines a Computing Model, Turing Machine, JVM
Javascript is a garbage-collected language, its NOT a perfect system though. Clearing Heap memory is a challenge
