---
syntax: markdown
tags: [frontend, javascript, nextjs]
---

# NEXT.JS Framework
write full-stack applications, using react client and node-backend

- write lesser code, dont have to use react routes and router
- Multiple build Modes: SSG (hydration) and SSR
- Multiple Build Environment and variables support
  - .env.local|development|production
  - .env.local overrides development and .production
  - Which file will it choose? Depends on NODE_ENV
  - Next.js will NOT leak environment variables to client, only available on server
  - NEXT_PUBLIC_VAR_NAME to expose them to client
  - various stages @requestime @buildtime

## Routing

Static Pages           Dynamic Pages
/pages/some-page.js    /pages/[dynamic-page].js enclosed within []

At buildtime, next.js marks certain routes which have `getServerSideProps(context)`

> Server-like experience from next.js

1. getServerSideProps gets executed for every single request, most important method
2. render the page
3. Redirect the page
4. Insert props to page Components from context object

### getStaticPaths()

- How to get params into getStaticProps
- Build pages ahead of time
- use `fallback: blocking`
  - No flashes of loading/missing content
  - 1st use has to experience some delay

### Use cases

- Connect to db, then destructure rows from cursor, then use them to fill page view
- Network, api calls without being CORS binded
- require files using commonJS syntax or dynamic imports
- getStaticProps `revalidate: 10` at most generate only 1 page in 10 seconds 
  - very solid way to implement counters and launch timers

Generate pages at Build Time

## Router

browser webapi implements route pushing and popping

```javascript
import { useRouter } from 'next/router'

export default function Home(props){
  const router = useRouter()
  if (router.isFallback) {
    return <h1>Loading</h1>
  }
  return <h1>Loaded</h1>
}
```

## Dynamic Routes

- used hydration, bundle of js is loaded only when its required
- 2 Page Components, Authenticated and NonAuthenticated, load only 1 bundle

```javascript
dynamic(() => import('./DynamicH1'))

user ? <AuthenticatedPanel /> : <NonAuthenticated /> 
```

## Image Component

.Problems
- CLS Cumulative Layout Shift
- Are images put on S3 optimized?
- inbuilt image loader
- inbuilt caching behaviour

.pros 
- Automatically compresses the image, webp
- Lazy loading for free
- Automatically scales image and avoids CLS

## Advanced

- CMS Previews @requestime >> @buildtime, setPreviewData in preview API path then cookie to byPass pre-rendering
- API Routes, mask URLs for external services, CORS middleware
- next/server API

npx create-next-app@latest --typescript --example [name|github-url] app-name
with-jest with-cypress

## Resources
https://youtu.be/EJVGzyWSCBE

## NextJs SSR
- run graphQL query on node-server (provided by next.js) and not in the browser
  - P1: set this up as a page top-level, re-use is difficult, server fetches new data ONLY on client call
  - P2: no live queries, no data updating on changes

- page has to know in advance which graphQL query it is going to use
- graphQL server on nextJS server API path https://github.com/ejscribner/nextjs-with-couchbase-and-graphql/blob/master/pages/api/graphql.js

## use sqlite3 DB with prisma on vercel?
The only writable directory on the filesystem is /tmp. Any temporary files you need to create in your Serverless Function must
be in that directory (you can typically do os.tmp() to find the the temp directory on the current system.
Since sqlite stores data locally, we recommend using a different database that can share state between instances of your functions.
You can't reliably write to sqlite because storage is ephemeral in Serverless Functions. As your function receives more
concurrent traffic, we will create new instances of your function that don't share the same storage.

workaround, sqliteDB --> JSON
Then you won't need a separate dependency at runtime since Node.js can parse JSON natively.
https://stackoverflow.com/questions/913067/sqlite-as-a-production-database-for-a-low-traffic-site
