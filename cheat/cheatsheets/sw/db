---
syntax: markdown
tags: [cs, db, programming, software]
---
# Database Relationship Modelling
1 to 1 Relationship
1 to Many Relationship | Many to 1 Relationship
Many to Many Relationship

## SQL vs NoSQL
+ Entire data is within same document, you see what you get
- Multiple copies of data, No single source of truth

SQL               NoSQL
Table oriented    json document oriented

## Functional Database, db is a software machine in itself 
- persistance
- other db things like consistency, reliability
- Computation (fiddeling with data) seperate from process (running the db machine)
> in FP, most of the data structures are persistent data-structure

# Database Questions
- Can DB support >300M records? https://stackoverflow.com/questions/3779088/database-that-can-handle-500-millions-rows
- What are joins? How and when to write them? inner, outer, left, right
- diff b/w CHAR and VARCHAR2? fixed vs variable length
- What are KEYS? Primary,
- What are Constraints? Not Null, Check , Default, Unique, Primary Key, Foreign Key
- Data Integrity, accuracy of data
- How to display current data in SQL query? SELECT GETDATE();
- Explain Index? Unique, Clustered, Non-Clustered, special lookup tables
- Cursor Object, allows traversal on multiple records
- What happens if a foreign key referenced object is deleted? https://stackoverflow.com/questions/54284084/how-are-foreign-keys-maintained-when-a-related-object-is-deleted
- What is GROUP BY? Aggregations on groups, like max(), min(), count()

# What is Normalization? and Denormalization
Insertion, update, deletion Anomaly
1NF deal with Atomicity, no repeating groups
2NF 1NF and no Partial Dependency
3NF no transitive dependency
3.5NF BCNF 
  
- Query Optimization
- DROP vs TRUNCATE
- ACID Transactions on DB
- Trigger stored procedures
- Queries and Sub-Queries
- What are VIEWS, virtual table +takes less space

# List the ways to get the count of records in a table?
SELECT * FROM table1
SELECT COUNT(*) FROM table1
SELECT rows FROM sysindexes WHERE id = OBJECT_ID(table1) AND indid < 2

# Write a SQL query to get the third-highest salary of an employee from employee_table?
SELECT TOP 1 salary
FROM(
  SELECT TOP 3 salary
  FROM employee_table
  ORDER BY salary DESC) AS emp
ORDER BY salary ASC;

# Between and IN
SELECT * FROM Students where ROLL_NO BETWEEN 10 AND 50;
SELECT * FROM students where ROLL_NO IN (8,15,25);

# How can you select unique records from a table?
Select DISTINCT studentID from Student

# How to create an index?
CREATE INDEX index_name ON table_name;
DROP INDEX index_name;
ALTER INDEX index_name on object_name;

# Named Foreign Key - referential integrity, Candidate
ALTER TABLE courses
ADD CONSTRAINT FK_CustomerCourse
FOREIGN KEY (customerID) REFERENCES Customers(customerID);

# JOIN
SELECT A.some B.thing
FROM Table_A AS A         # left table
FULL JOIN Table_B AS B    # right table
ON A.col = B.col;         # How the 2 tables are joined?

> Store Information, not queery answers

- mongodb, cassandra -> table per query pattern

## DATOMIC
- Propetory software
- writes are single threaded
  - when everythign is multi-threaded these days
- queries run on the client
  - SELECT * from TABLE and then use regex to filter on output? Bad idea
- Transactions are data
  - No chatty back and forth communication b/w client and server
  - read, write + read, write
- only 4 Indexes

> OLTP DB spends about 75% of the time on cordination and only remaning 25% in actual read+writes

- Co-ordination in DB?
  - moving around buffers, from disk to RAM and vice-versa
  - Managing resource locks
- single threaded WRITE to get more done by a lower workload
  - TRADEOFF: not suitble for high volume DB-writes
- Event Sourcing patterns, stream of events are processed by datomic to generate new DATA-Indexes
- Google uses BIG-TABLES to store their crawler data, entire internet is stored on BIG-TABLES
  - updating Indexes at the time of write is Expensive, as they are fancy TREES with balancing schemees etc.
  - Periodic Merges, defer Index generation from the DB write transaction
- When you run a query, you generate indexes from UNMERGED-log tables

> Database is a VALUE, immutable data

- Whole DB is represented as immutable Value
- give me the database as of this date and time
- Datamic has REAL updates, adds new edge in value tree, unlike fake updates in RDBMS, delete and write atomic operation
- Run same QUERIES with asOf(lastMonth) on different time
- Transaction Reports on RT with no RT load on transactor
- If you query against a data last year then you can query it now

## ETL with Clojure and Datomic
- spec -> specificity, structure of data, type-system for clojure
- transducers -> decouple transforms from input or output
- core async
- What a good ETL job will look like?

## TIME-SERIES Database
- TIME-SERIES data points are data that is collected and aggregated over a perios of time
- market data, sensor data, Resource monitoring data
- Query workload are optimized for Time-Aggregation values

## DATA Analysis
1. Description Analysis, what happened?
2. Diagnostic Analysis, Why it happened? Anomalies
3. Predictive Analysis, What is likely to happen in future?
4. Prescriptive Analysis, What is the best course of action?

- Capacity Planning?
- Teend Analysis Charts?
