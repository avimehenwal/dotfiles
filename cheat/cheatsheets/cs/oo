---
tags: [cs, oo, programming, mixin]
---
# Object Oriented Programming
[ procedure + State ] and state is evil in FP world
states are supposed to hidden, or private
OO is more than just STATES, its Dependency Management
Dependency Inversion  Highlevel concepts are independent and low-level concepts depends on high-level concepts
We use Polymorphism to do Dependency Inversion in OO, types of decoupling

# Mixins
In OO, class that contains methods to be used by other classes without having to be parent class of those other classes
+ encourages code reuse
+ could be used as a mechanism to implement Multiple Inheritance (diamond problem)
  https://www.typescriptlang.org/docs/handbook/mixins.html

# Inheritance
is a mechanism to implement runtime polymorphism where once class is dereived from another
class, but overriding all or part of the implementation.
- Inheritance/Subclassing hierarchies can become trouble as project grows, brittle tight coupling with parent types, rippling down side effects
-> Gorilla / Banana Problem

> Prototype-based programming uses generalized objects, which can then be cloned and extended.

# types of Inheritance
1. Class Inheritance      as in Python, java, classes are often seen as analogous to types 
  2. Protocol Inheritance   as in js -> just a working copy, ECMAScript 6 introduced classes as syntactic sugar over JavaScript's existing prototypes
    1. Deligate Prototypes                    ditch new k/w with Object.create(prototype)
    2. Cloning / Concatenation Prototypes     heavely used with MIXINS, deep copy mechanism
    3. Functional Prototypes                  data privacy using closures, private attributes
__proto__ is a historical getter/setter for [[Prototype]] == Prototype property, akin to python world __dict__
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto
https://stackoverflow.com/questions/9959727/proto-vs-prototype-in-javascript

# Polymorphism
single interface to entities of multiple types

1. Ad-Hoc Polymorphism        explicitly define functions to deal with various types using operator/function OVERLOADING
2. Parametric Polymorphism    type independence achieved via, Generic Type Parameters, @runtime
3. Subtyping                  restrict the range of types that can be used in a particular case of polymorphism. Liskov Substitution principle
                              SubType <: SuperType

  [ Parametric Polymorphism >> Adhoc Polymorphism ]

# Function/Method Overloading
ability to create multiple functions with same name but with different implementations

# SubTyping vs SubClassing
SubType       interface Inheritance, reuse of purpose/meaning
SubClassing   implementation Inheritance, reuse of code

# Generic Types Variables
- type checking @runtime
- can use multiple Generic Type Variables
- can be used within Interfaces
- can put constraints on Generics             <T extends {firstName: string; lastName: string}>
- can use Generics in JSX

# What if I want to return last element from any type of Array? Number, string don't care!
const last = <T>(arr: Array<T>): <T> => {
  return arr[arr.length -1];
}

## Generics with React
- Prop types are known in advance, not know Ahead-Of-Time
- use within JSX


