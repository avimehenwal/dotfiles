---
tags: [cs, programming]
---
Do not fall victim to Best Practises

# Universal laws of programming
- Writing BAD code is a pre-requisite to writing GOOD code
- you need to stop trying to skip steps
- start creating your own best practises

# Interface
How your software object interacts with the outside world and expose functionality
Similar to hardware interface like HDMI port on display, Type C charging on laptops, disk drive
Human Interfaces, built for humans - Keyboards
Anything that is Public/plugin should have an Interface, to prevent misuse.
Who can mess up who? Can plugin messup the host s/w? Can host s/w messup the plugin s/w?

# Accessors, Getter-setter pattern on class attributes
Use setters when you want to restrict/validate the values being set. Preprocessing before setting required

# Information Systems
In Memory/RAM         mutable abstract modelled software objects
Persistant storage    database, disk, files, internet
code 1 machine program to N machine program

> Specificity can  kill the reuse, Promise of OO, code reuse

# Interface vs Types vs classes
A key principle of design is to prohibit access to all resources by default, allowing access only through well-defined entry points
i.e., interfaces. Software interfaces provide access to computer resources (such as memory, CPU, storage, etc.) of the underlying
computer system; direct access (i.e., not through well-designed interfaces) to such resources by software can have major
ramifications—sometimes disastrous ones—for functionality and stability.
Interfaces between software components can provide constants, data types, types of procedures, exception specifications,
           and method signatures. Sometimes, public variables are also defined as part of an interface
